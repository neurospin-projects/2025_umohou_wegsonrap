#!/usr/bin/env python3
# ns-app-selectfield 0.0.1
# Generated by dx-app-wizard.

import os
import glob
import dxpy
import subprocess

from distutils.version import LooseVersion
import pandas as pd

def _get_admin_info():
    """ Automatically discover project_id dispensed dataset ID and load the dataset
    """
    dx_project_context_id  = os.environ.get("DX_PROJECT_CONTEXT_ID")
    print(f'DX_PROJECT_CONTEXT_ID is: [{dx_project_context_id}]')
    dispensed_dataset_id = dxpy.find_one_data_object(typename='Dataset', 
                                    name='app*.dataset',
                                    folder='/',
                                    name_mode='glob', 
                                    project=dx_project_context_id)['id']
    dataset = (':').join([dx_project_context_id, dispensed_dataset_id])

    return dx_project_context_id, dataset


@dxpy.entry_point('main')
def main(outprefix, output_folder):
    """
    Params:
    =======
        outprefix : string to form the basename (name part of the final DXFile)
        output_folder : string to form the output_folder starting from the / of the projects
    Return:
    =======
        (implicit) : a dict with the entry outputfile that will contain a DXFile 
            description
    """

    # Get admin information (collate group-id and current dataset after refresh)
    project_id, dataset = _get_admin_info()
    # this cmd to obtain the 3 data dictionary files
    cmd = ["dx", "extract_dataset", dataset, "-ddd", "--delimiter", ","]
    subprocess.check_call(cmd)

    # Get the data dictionnary as pandas
    path = os.getcwd()
    data_dict_csv = glob.glob(os.path.join(path, "*.data_dictionary.csv"))[0]
    data_dict_df = pd.read_csv(data_dict_csv)
    local_outfname = f'/tmp/{outprefix}.csv'
    data_dict_df.to_csv(local_outfname)


    # Get information from the data dictionary
    def field_names_for_ids(field_id):
        field_names = ["eid"]
        for _id in field_id:
            select_field_names = list(data_dict_df[data_dict_df.name.str.match(r'^p{}(_i\d+)?(_a\d+)?$'.format(_id))].name.values)
            field_names += select_field_names
        field_names = sorted([field for field in field_names], key=lambda n: LooseVersion(n))
            
        #field_names = [f"participant.{f}" for f in field_names]
        #return ",".join(field_names)
        return field_names

    field_ids = ['31', '21022', '22001', '22006', '22009', '22019', '22021', '22027',
                '41270', '20107', '2946', '1807',
                '20110', '3526', '1845']
    field_names = field_names_for_ids(field_ids)
    with open(local_outfname, 'w') as fp:
        fp.write('\n'.join(field_names))


    # output management and upload outputfile
    remote_outDXFile = dxpy.upload_local_file(local_outfname, project=project_id, folder=output_folder)
    output = {}
    output["outputfile"] = dxpy.dxlink(remote_outDXFile)

    return output


dxpy.run()